GAMS 24.2.3  r46072 Released May 22, 2014 WEX-WEI x86_64/MS Windows 06/10/20 16:48:32 Page 1
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


   1   
      Title Optimization model for Glen Canyon Dam releases to favor Bugs popula
      tion. (June 2018)
       
      ###################################
      Created By: Moazzam Ali Rind
      Email: moazzamalirind@gmail.com
       
      Created : 4/24/2019
      Last updated: 3/5/2020
       
      Description: Daily High flow & low flow release concept with an aim to min
      imize the difference between two daily flows.
                   Whereas, the overall objective of the model is to get the dai
      ly flow release outer bounds which is not only favourable for bugs
                   but also accounts the hydropower objective to its best. Conve
      rsely, the total monthly release amount is maintained same as per colorado
       river compact or Constrainted amount.
       
      ######################################
       
      #new Metric for Bug Suitability
       
  21   
  22  ****Model code:
  23   
  24  Set
  25   
  26            d                             days in June
  27            p                             time period during a day /pLow "Lo
      w flow period",pHigh "High flow period"/
  28            f                             objective functions/BugIndex "Bug 
      Flow objective", Hydro "Hydropower Objective"/
  29  *          All_cases                     Joining All senarios in one set i
      .e. Extreme points cases and intermediate point cases/Min,sc1 * sc6,Max/
  30            tot_vol                       Total montly release volume (acre-
      ft)/V1*V5/
  31  *          Scen(All_cases)               objective function scenario value
      s /sc1 * sc6/
  32            modpar                        Saving model parameter for each of
       the solutions for each of the scenario/ ModStat "Model Statistics", SolSt
      at "solve Statistics"/
  33            Ext_points                    Defining Extreme Points/Min, Max/
  34            case                           Defining constrainted cases /case
      1,case2/
  35  ;
  36   
  37  *creating a copy of set f as f2.
  38  Alias (f,f2);
  39   
  40   
  41  *======================================
  42  *Parameters
  43  *======================================
  44   
  45  PARAMETERS
  46   
  47  FtoUse(f)                               Objective functions to use (1=yes 
      0=no)
  48  FLevel(f)                               Right hand side of constraint when
       the objective is constrained or value of constrainted objective
  49   
  50  FStore(f2,f,tot_vol)                    Storing objective function values 
      over different scenarios of f
  51  XStore(f2,d,tot_vol,p)                  Store Energy Generated at extreme 
      values over different scenarios (MWH)
  52  RStore(f2,d,tot_vol,p)                  Store Release values at extreme va
      lues over different scenarios  (cfs)
  53  Sstore(f2,d,tot_vol)                    Store Storage Values over differen
      t scenarios (ac-ft)
  54   
  55   
  56  Scen_store(f,case,tot_vol)                   Store objective function valu
      es under different constrainted part
  57  ReleaseSave(tot_vol,case,d,p)                Saving release from each of t
      he senarios  (cfs)
  58  EnergyGen_save(tot_vol,case,d,p)             Saving Energy Generated from 
      each of the senarios (MWH)
  59  Storage_Save(tot_vol,case,d)                 Saving Storage values from ea
      ch of the senarios(ac-ft)
  60   
  61  ExtModeL_Stat(tot_vol,f2,modpar)             Extreme Points Model Results 
      for the scenarios
  62  ModelResults(tot_vol,case,modpar)            Model Results for the scenari
      os
  63   
  64  *MinVal(tot_vol,f)                      Extracting the Minimum objectives 
      values
  65  *MaxVal(tot_vol,f)                      Extracting the Maximum objectives 
      values
  66   
  67  *MinVal_a(tot_vol)                      Extracting the Minimum objective v
      alue (BugIndex objective in this case)
  68  *MaxVal_a(tot_vol)                      Extracting the Maximum objective v
      alue (BugIndex objective in this case)
  69   
  70  initstorage                           Initial reservoir storage 1st June 2
      018 (acre-ft)
  71  maxstorage                            Reservoir capacity (acre-ft)
  72  minstorage                            Minimum reservoir storage to maintai
      n hydropower level(acre-ft)
  73  Inflow(d)                             Inflow to reservoir (cfs)
  74  maxRel                                Maximum release in a day d at any ti
      meperiod p(cfs)
  75  minRel                                Minimum release in a day d at any ti
      meperiod p(cfs)
  76  evap                                  evaporation (ac-ft per day Considere
      d constant throughout the month
  77  EnergyRate(p)                         Energy revenue ($ per MWH) /pLow 24.
      56, pHigh 62.21/
  78  *observed_release(d,p)                 observed release averaged over two 
      timesteps (cfs)
  79  *Obj_dir(f)                            To set objective directions inorder
       to set the maximization and minimization of the objectives /BugIndex -1,H
      ydro 1/
  80   
  81  Duration(p)                           Duration of period (hours)
  82  Vol_monthlyrelease(tot_vol)           Different Total volumes of water to 
      be released in the month i.e. June2018 in presented case (acre-ft)/V1 7000
      00,V2 793857.12,V3 900000,V4 1000000,V5 1100000/
  83  TotMonth_volume                       To represent total monthly volume (a
      cre-ft)
  84   
  85  Levels(case)                          Selected objective function levels w
      ith all equations /case1 10,case2 20/
  86  FLevel(f)                              Selected constrainted objective fun
      ction value
  87   
  88  *observed_release(d,p)              observed release at may 2018 averaged 
      over two timesteps (cfs)
  89   
  90  ;
  91   
  92   
  93  Duration("pLow")= 8;
  94  * low period weightage in a day(08 Hours or 8 by 24 i.e:0.33 of day)
  95   
  96  Duration("pHigh")= 16;
  97  *  High period weightage in a day( 16 Hours or 16 by 24 i.e:0.67 of day)
  98   
  99  *===================================================
 100  * Read data from Excel
 101  *===================================================
 103  *$CALL GDXXRW.EXE input=June2018.xls output=V1_check.gdx par=observed_rele
      ase rng=V1_Simulation!A1:C31  set=d rng=day!A1 Rdim=1  par=Inflow rng=infl
      ow!A1 Rdim=1  par=initstorage rng=initstorage!A1 Rdim=0  par=maxstorage rn
      g=maxstorage!A1 Rdim=0   par=minstorage rng=minstorage!A1 Rdim=0  par=maxR
      el rng=maxRel!A1 Rdim=0 par=minRel rng=minRel!A1 Rdim=0  par=evap rng=evap
      !A1 Rdim=0
 104  *Write the input Data into a GDX file
**** File: C:\Users\moazz\OneDrive\Documents\GitHub\-Bug-flow-\Model_Troubleshoo
                             ting\June2018_newobj_troubleshooting\constraint.gdx
**** Msg : No such file or directory
 105  $GDXIN constraint.gdx
****                      $510
 106  *$GDXIN V1_check.gdx
 107   
 108   
 109  * parameters and input data from the GDX file into the model
 110  $LOAD d
****      $502
 111  $LOAD inflow
****      $502
 112  $LOAD initstorage
****      $502
 113  $LOAD maxstorage
****      $502
 114  $LOAD minstorage
****      $502
 115  $LOAD maxRel
****      $502
 116  $LOAD minRel
****      $502
 117  $LOAD evap
****      $502
 118  *$LOAD observed_release
 119   
 120  *Close the GDX file
 122   
 123  Display d,inflow, initstorage, maxstorage, minstorage, maxRel, minRel, eva
****          $141   $141         $141        $141        $141    $141    $141  
      p, p, Duration;
      $141
 124  *===============================================
 125  SCALAR
 126  conver                        conversion factor from cfs to ac-ft per day 
      /1.983/
 127  factor_foracftperHr           conversion factor from cfs to ac-ft per hour
       (0.0014*60)/0.083/
 128  Numdays                       Number of days in month/30/
 129  Num_of_timesteps              Total Number of timesteps used /60/
 130  Daily_Ramprate                Allowable daily ramp rate (cfs)/8000/
 131  *Threshold                    Minimum release value of the hydrograph (Thr
      eshold value)/10000/
 132   
 133  VARIABLES
 134   
 135  ObjectiveVal(f)               Objective functions calculation
 136  CombineObjective              Combine objective functions for each senario
 137   
 138  Positive Variables
 139  storage(d)                    reservoir storage on any day d (acre-ft)
 140  release(d,p)                  reservoir release on any day d in any period
       p (cfs)
 141  *Energyrate_vari(d,p)          Rate of hydropower with respect to day and 
      period of day ($ per MWH)
 142  Energy_Gen(d,p)               Hydropower Generated at a each time step (MW
      H)
 143  ReleaseVol(d,p)               volume of water released per time step(acre-
      ft)
 144  QMin                          Minimum release value of the hydrograph (Thr
      eshold value)
 145   
 146  ;
 147   
 148   
 149   
 150   
 151  EQUATIONS
 152  *AND CONSTRAINTS
 153   
 154  EQ1__ResMassBal(d)           Reservoir mass balance (acre-ft)
 155  EQ2__reqpowerstorage(d)      The minimum storage equivalent to reservoir l
      evel required for hydropower generation (acre-ft)
 156  EQ3__maxstor(d)              res storage max (acre-ft)
 157  EQ4__MaxR(d,p)               Max Release (cfs)
 158  EQ5__MinR(d,p)               Min Release  (cfs)
 159  *EQ6_Energyrate(d,p)          Defination of Energy rate as per period of d
      ay and day of week ($ per MWH)
 160  EQ7_Rampup_rate(d,p)         Constraining the daily ramp up rate between t
      he timesteps(cfs) ..(with in same day)
 161  EQ7a_Rampdown_rate(d,p)      Constraining the daily ramp down rate between
       the timesteps(cfs) ..(with in same day)
 162  EQ7b_Rampup_ratenext(d,p)    Constraining the daily ramp up rate between t
      he last timestep of current day and next timestep for next day(cfs)
 163  EQ7c_Rampdown_ratenext(d,p)  Constraining the daily ramp down rate between
       the last timestep of current day and next timestep for next day(cfs)
 164  EQ7d_FlowVolume(d,p)         volume of water released per time step (acre-
      ft)
 165  EQ8__Monthtlyrel             Constraining Total monthly volume of water re
      leased in "May" as per WAPA information(acre-ft)
 166  EQ9_Threshold                Minimun release value within the hydrograph(c
      fs)
 167  EQ9a_Qminconstraint(d,p)     Constraint related to Qmin(Threshold)
 168  EQ10_function(f)             Fitting Arctangent Function to the release va
      lues (New Bug Metric)
 169  EQ12_EnergyGen(d,p)          Amount of energy generated in each time step 
      (MWH)
 170  EQ12a_EnergyGen_Max(d,p)     Maximum Energy Generation Limit of the Glen C
      aynon Dam(MW)for Low Period
 171  EQ13_EnergyRevenue(f)        Total monthly Hydropower Revenue generated ($
      )
 172  EQ15_CombinedObjectives      Defining all objective in single equation
 173  *EQ14_ReleaseSim(d,p)         Setting release values as predefined for sim
      ulation(cfs)
 174  ;
 175   
 176  *-------------------------------------------------------------------------
      -----*
 177   
 178  EQ1__ResMassBal(d)..         storage(d) =e= initstorage$(ord(d)eq 1)+ stor
      age(d-1)$(ord(d)gt 1)+ (inflow(d)*conver)- sum(p,ReleaseVol(d,p))-evap;
 179  EQ2__reqpowerstorage(d)..    storage(d) =g= minstorage;
 180  EQ3__maxstor(d)..            storage(d)=l= maxstorage;
 181  EQ4__MaxR(d,p)..             release(d,p)=l= maxRel;
 182  EQ5__MinR(d,p)..             release(d,p)=g= minRel;
 183  *EQ6_Energyrate(d,p)..        Energyrate_vari(d,p)=e= EnergyRate(p);
 184  *Equation 6 is just making the energy rate same for all days. However in f
      uture we can change it as per different rates for different days.
 185   
 186  EQ7_Rampup_rate(d,p)..          release(d,"pHigh")-release(d,"pLow")=l=Dai
      ly_Ramprate;
 187  EQ7a_Rampdown_rate(d,p)..       release(d,"pHigh")-release(d,"pLow")=g= -1
      *Daily_Ramprate ;
 188  EQ7b_Rampup_ratenext(d,p)$(ord(d) lt Numdays)..     release(d,"pHigh")-rel
      ease(d+1,"pLow")=g=-1*Daily_Ramprate;
 189  EQ7c_Rampdown_ratenext(d,p)$(ord(d) lt Numdays)..   release(d,"pHigh")-rel
      ease(d+1,"pLow")=l= Daily_Ramprate;
 190  EQ7d_FlowVolume(d,p)..       ReleaseVol(d,p) =e= release(d,p)*factor_forac
      ftperHr*Duration(p);
 191  EQ8__Monthtlyrel..           sum((d,p),ReleaseVol(d,p))=e= TotMonth_volume
      ;
 192   
 193  *EQ8_  constraining the overall monthly released volume..
 194   
 195   
 196  EQ9_Threshold..                                QMin=e=smin((d,p),release(d
      ,p));
 197  * EQ9_  finds the minimimum release value from the hydrograph.
 198  EQ9a_Qminconstraint(d,p)..                      QMin=l= release(d,p);
 199   
 200   
 201   
 202  *EQ10_function(f)$(ord(f) eq 1)..             ObjectiveVal(f)=e= sum((d,p)
      ,(-1/2)*(arctan(((release(d,p)-11763.84)-0.65)/0.001)/(pi/2)+1)+1);
 203  EQ10_function(f)$(ord(f) eq 1)..             ObjectiveVal(f)=e= round (sum
      ((d,p),{(-1/2)*(arctan(((release(d,p)-QMin)-0.65)/0.001)/(pi/2)+1)+1}*{(-1
      /2)*(arctan(((release(d,p++1)-QMin)-0.65)/0.001)/(pi/2)+1)+1}))/2;
 204  *EQ10_ objective function qauntifying number of constant flow days.  The E
      quation is period dependent and in this study each day has two periods hen
      ce the function values is divided by two.
 205  *Besides, we want continous low flow days. For the reason, the arc tangent
       function value of current period is multiplied with the value of the next
       period. In this way, both of periods will only be counted if both are low
       flow periods else zero.
 206   
 207   
 208  EQ12_EnergyGen(d,p)..                         Energy_Gen(d,p)=e= release(d
      ,p)*Duration(p)*0.03715;
 209  * Energy generation formula used in wapa Execl model..
 210   
 211   
 212  EQ12a_EnergyGen_Max(d,p)..                    Energy_Gen(d,p)=l= 1320*Dura
      tion(p);
 213  *Maximum Energy Generation capacity of GCD (MWH).. Source https://www.usbr
      .gov/uc/rm/crsp/gc/
 214   
 215  EQ13_EnergyRevenue(f)$(ord(f) eq 2)..         ObjectiveVal(f)=e= sum((d,p)
      ,Energy_Gen(d,p)*EnergyRate(p));
 216  **EQ13_HyrdroPower objective
 217  *EQ13_EnergyRevenue(f)$(ord(f) eq 2)..         ObjectiveVal(f)=e= sum((d,p
      ),(-1/2)*(arctan(((release(d,p)-Threshold)-0.65)/0.001)/(pi/2)+1)+1);
 218   
 219  EQ15_CombinedObjectives..                     CombineObjective =e= sum(f,F
      toUse(f)*ObjectiveVal(f));
 220   
 221  *EQ14_ReleaseSim(d,p)..                       release(d,p)=e=observed_rele
      ase(d,p);
 222  ***************************************************
 223  ******
 224  ***************************************************
 225  *-------------------------------------------------------------------------
      -----*
 226  *Initial values just to run simulation (Random Pick)... One might need to 
      pick other numbers if he/she founds that some of the runs are locally infe
      asbile on their intial values.
 227   
 228   
 229  release.L(d,p) = 8000;
 230  *MinRelease.L = 10000;
 231   
 232   
      *initializing the threshold value by considering the max release value so 
      that all the possible values so be considered.
       Threshold.L= 32000;
       
       loop((d,p),
         if  (Threshold.L > release.L(d,p), Threshold.L = release.L(d,p);
      );
      );
       
       
      ******************************************************
      *****Model to disclose the Binding and Shadow Values
      ******************************************************
       
       
      PARAMETERS
      *For shadow values Only, these parameters are introduced ...
       
       
      EQ1__ResMassBal_m(d,tot_vol)           Reservoir mass balance (acre-ft)
      EQ2__reqpowerstorage_m(d,tot_vol)      The minimum storage equivalent to r
      eservoir level required for hydropower generation (acre-ft)
      EQ3__maxstor_m(d,tot_vol)              res storage max (acre-ft)
      EQ4__MaxR_m(d,p,tot_vol)               Max Release (cfs)
      EQ5__MinR_m(d,p,tot_vol)               Min Release  (cfs)
      EQ6_Energyrate_m(d,p,tot_vol)          Defination of Energy rate as per pe
      riod of day and day of week ($ per MWH)
      EQ7_Rampup_rate_m(d,p,tot_vol)         Constraining the daily ramp up rate
       between the timesteps(cfs) ..(with in same day)
      EQ7a_Rampdown_rate_m(d,p,tot_vol)      Constraining the daily ramp down ra
      te between the timesteps(cfs) ..(with in same day)
      EQ7b_Rampup_ratenext_m(d,p,tot_vol)    Constraining the daily ramp up rate
       between the last timestep of current day and next timestep for next day(c
      fs)
      EQ7c_Rampdown_ratenext_m(d,p,tot_vol)  Constraining the daily ramp down ra
      te between the last timestep of current day and next timestep for next day
      (cfs)
      EQ7d_FlowVolume_m(d,p,tot_vol)         volume of water released per time s
      tep (acre-ft)
      EQ8__Monthtlyrel_m(tot_vol)            Constraining Total monthly volume o
      f water released in "April" as per WAPA information(acre-ft)
      EQ9_Threshold_m(tot_vol)               Minimun release value within the hy
      drograph(cfs)
      *EQ9_Avgrelease_m(tot_vol)              Average Monthly release (cfs)
      *EQ10_function_m(f,tot_vol)              Fitting Arctangent Function to th
      e release values
      *EQ10_Standarddev_m(tot_vol)            Standard Devation over month.
      *EQ11_Hydropeakingindex_m(f,tot_vol)    Hydropeaking index value over mont
      h.
      EQ12_EnergyGen_m(d,p,tot_vol)          Amount of energy generated in each 
      time step (MWH)
      EQ12a_EnergyGen_Max_m(d,p,tot_vol)     Maximum Energy Generation Limit of 
      the Glen Caynon Dam(MW)for both Period
      EQ13_EnergyRevenue_m(f,tot_vol)        Total monthly Hydropower Revenue ge
      nerated ($)
      *EQ14_ReleaseSim_m(d,p,tot_vol)         Setting release values as predefin
      ed for simulation(cfs)
      EQ15_CombinedObjectives_m(tot_vol)     Defining all objective in single eq
      uation
       
       
       
      *-------------------------------------------------------------------------
      -----*    *---------------------------------------------------------------
      ---------------*
       
      *-------------------------------------------------------------------------
      -----*    *---------------------------------------------------------------
      ---------------*
      Parameters
      Extreme_Points(f,tot_vol,Ext_points)    Saving Extreme points for All Volu
      me Senarios
      Obj_Save(f,tot_vol,All_cases)           Saving Objectives values for all s
      enarios under one parameter
       
      ;
 286  ***************************************************
 287  ******Extreme points Model
 288  ****************************************** ********
 289   
 290  *MODEL ExtremePt Finding extreme points using the NLP under each of the to
      tal Volume searios .
 291   
 292  MODEL ExtremePt Find extreme points by using nlp/ALL/ ;
 293   
 294  loop((tot_vol,f2),
 295  *loop(f2,
 296  *Ignore all the objectives
 297   FtoUse(f) = 0;
 298  *  Only consider the current objective
 299     FtoUse(f2) = 1;
 300     Display FtoUse;
 301   
 302  option reslim=20000;
 303  option Threads=6;
 304  option optcr=0.001;
 305  option NLP= CONOPT;
 306   
 307     TotMonth_volume= Vol_monthlyrelease(tot_vol);
 308     SOLVE ExtremePt USING dnlp maximize CombineObjective;
****                                                         $257
 309     FStore(f2,f,tot_vol)= ObjectiveVal.L(f)+EPS;
****                                        $141
 310     XStore(f2,d,tot_vol,p) = Energy_Gen.L(d,p);
****                                         $141
 311     RStore(f2,d,tot_vol,p)=release.L(d,p);
 312     Sstore(f2,d,tot_vol)=storage.L(d);
****                                  $141
 313     ExtModeL_Stat(tot_vol,f2,"SolStat")= ExtremePt.solvestat;
 314     ExtModeL_Stat(tot_vol,f2,"ModStat")= ExtremePt.modelstat;
 315     DISPLAY FStore,XStore,RStore,Sstore;
 316     option clear=CombineObjective,clear=ObjectiveVal,clear=release;
       
         TotMonth_volume= Vol_monthlyrelease("V1");
         SOLVE ExtremePt USING dnlp maximize CombineObjective;
         FStore(f2,f,"V1")= ObjectiveVal.L(f)+EPS;
         XStore(f2,d,"V1",p) = Energy_Gen.L(d,p);
         RStore(f2,d,"V1",p)=release.L(d,p);
         Sstore(f2,d,"V1")=storage.L(d);
         ExtModeL_Stat("V1",f2,"SolStat") = ExtremePt.solvestat;
         ExtModeL_Stat("V1",f2,"ModStat") = ExtremePt.modelstat;
         DISPLAY FStore,XStore,RStore,Sstore;
         option clear=CombineObjective,clear=ObjectiveVal,clear=release;
 330  );
 331   
 332   
 333   
      MODEL ExtremePt1 Find extreme points by using NLP/ALL/ ;
      *Ignore all the objectives
         FtoUse(f) = 0;
      *  Only consider the current objective
         FtoUse(f2) = 1;
         FtoUse("BugIndex") = 1;
         TotMonth_volume= Vol_monthlyrelease("V1");
       
      SOLVE ExtremePt1 USING dnlp MAXIMIZING CombineObjective;
       
         FStore("BugIndex","BugIndex",tot_vol)= ObjectiveVal.L("BugIndex");
         FStore("BugIndex","Hydro",tot_vol)= ObjectiveVal.L("Hydro");
         FStore("BugIndex",f,tot_vol)= ObjectiveVal.L(f);
         XStore("BugIndex",d,tot_vol,p) = Energy_Gen.L(d,p);
         RStore("BugIndex",d,tot_vol,p)=release.L(d,p);
         Sstore("BugIndex",d,tot_vol)=storage.L(d);
         ExtModeL_Stat(tot_vol,"BugIndex","SolStat") = ExtremePt1.solvestat;
         ExtModeL_Stat(tot_vol,"BugIndex","ModStat") = ExtremePt1.modelstat;
       
       
      MODEL ExtremePt2 Find extreme points by using  NLP/ALL/ ;
      *Ignore all the objectives
         FtoUse(f) = 0;
      *  Only consider the current objective
         FtoUse(f2) = 1;
         FtoUse("Hydro") = 1;
         TotMonth_volume= Vol_monthlyrelease("V1");
       
      SOLVE ExtremePt2 USING dnlp MAXIMIZING CombineObjective;
       
         FStore("Hydro","BugIndex",tot_vol)= ObjectiveVal.L("BugIndex");
         FStore("Hydro","Hydro",tot_vol)= ObjectiveVal.L("Hydro");
         FStore("Hydro",f,tot_vol)= ObjectiveVal.L(f);
         XStore("Hydro",d,tot_vol,p) = Energy_Gen.L(d,p);
         RStore("Hydro",d,tot_vol,p)=release.L(d,p);
         Sstore("Hydro",d,tot_vol)=storage.L(d);
         ExtModeL_Stat(tot_vol,"Hydro","SolStat") = ExtremePt2.solvestat;
         ExtModeL_Stat(tot_vol,"Hydro","ModStat") = ExtremePt2.modelstat;
       
      *Finding values minimum and maximum values
      loop((tot_vol,f),
      *Saving both objectives extreme values
      MinVal(tot_vol,f) = smin(f2,FStore(f2,f,tot_vol));
      MaxVal(tot_vol,f) = smax(f2,FStore(f2,f,tot_vol));
       
      *Merging both Extreme point in one Parameter for easier results post proce
      ssing.
      Extreme_Points(f,tot_vol,"Min")= MinVal(tot_vol,f);
      Extreme_Points(f,tot_vol,"Max")= MaxVal(tot_vol,f);
       
      Extreme_Points(f,tot_vol,EXT_points) = Extreme_Points(f,tot_vol,EXT_points
      ) + EPS;
       
      *Sorting just the values for Bugindex objective because in this presented 
      model Bugindex objective is taken as constrain. However, one can easily ge
      t values for both functions by replacing BugIndex with "f" Or if only valu
      es of other objective is required just replace BugIndex with Hydro in Leve
      ls equation.
      MinVal_a(tot_vol)= MinVal(tot_vol,"BugIndex");
      MaxVal_a(tot_vol)= MaxVal(tot_vol,"BugIndex");
       
      Display MinVal,MaxVal,MinVal_a,MaxVal_a,Extreme_points;
       
      *Finding the intermediate levels between Extreme points
      Levels("BugIndex",tot_vol,Scen)= MinVal_a(tot_vol)+((MaxVal_a(tot_vol)-Min
      Val_a(tot_vol))*(ord(scen)/(card(scen)+1)));
      );
       
       
       
      *$ontext
      * Just disclosing the Binding and Shadow Values
      EQ1__ResMassBal_m(d,tot_vol)= EQ1__ResMassBal.m(d);
      EQ2__reqpowerstorage_m(d,tot_vol)= EQ2__reqpowerstorage.m(d);
      EQ3__maxstor_m(d,tot_vol)= EQ3__maxstor.m(d);
      EQ4__MaxR_m(d,p,tot_vol)= EQ4__MaxR.m(d,p);
      EQ5__MinR_m(d,p,tot_vol)= EQ5__MinR.m(d,p);
      EQ6_Energyrate_m(d,p,tot_vol)= EQ6_Energyrate.m(d,p);
      EQ7_Rampup_rate_m(d,p,tot_vol)= EQ7_Rampup_rate.m(d,p);
      EQ7a_Rampdown_rate_m(d,p,tot_vol)= EQ7a_Rampdown_rate.m(d,p);
      EQ7b_Rampup_ratenext_m(d,p,tot_vol)= EQ7b_Rampup_ratenext.m(d,p)$(ord(d) l
      t Numdays);
      EQ7c_Rampdown_ratenext_m(d,p,tot_vol)= EQ7c_Rampdown_ratenext.m(d,p)$(ord(
      d) lt Numdays);
      EQ7d_FlowVolume_m(d,p,tot_vol)= EQ7d_FlowVolume.m(d,p);
      EQ8__Monthtlyrel_m(tot_vol) = EQ8__Monthtlyrel.m;
      EQ9_Threshold_m(tot_vol)=EQ9_Threshold.m;
      *EQ9_Avgrelease_m(tot_vol)= EQ9_Avgrelease.m ;
      *EQ10_function_m(f,tot_vol)=EQ10_function_m(f)$(ord(f) eq 1);
      *EQ10_Standarddev_m(tot_vol) = EQ10_Standarddev.m ;
      *EQ11_Hydropeakingindex_m(f,tot_vol)=EQ11_Hydropeakingindex.m(f)$(ord(f) e
      q 1) ;
      EQ12_EnergyGen_m(d,p,tot_vol)= EQ12_EnergyGen.m(d,p);
      EQ12a_EnergyGen_Max_m(d,p,tot_vol)= EQ12a_EnergyGen_Max.m(d,p);
      EQ13_EnergyRevenue_m(f,tot_vol)= EQ13_EnergyRevenue.m(f)$(ord(f) eq 2);
      *EQ14_ReleaseSim_m(d,p,tot_vol)= EQ14_ReleaseSim.m(d,p)$Use_Sim(d,p);
      EQ15_CombinedObjectives_m(tot_vol) = EQ15_CombinedObjectives.m ;
      );
 426   
 427   
 428   
 429   
 430  *-------------------------------------------------------------------------
      -----*  *-----------------------------------------------------------------
      -------------*
 431  *-------------------------------------------------------------------------
      -----*  *-----------------------------------------------------------------
      -------------*
 432   
 433  *This section constrains one objective to a certain defined level
 434  EQUATION
 435  ObjAsCon(f)          Objective function as constraint f(x) = FLevel(f);
 436   
 437  *The objective as constraint is greater or less or equal than the level se
      t for that objective
 438  ObjAsCon(f)$(1 - FtoUse(f))..        ObjectiveVal(f)=e=FLevel(f);
 439   
 440  MODEL ObjAsConstraint Single-objective model with other objective constrai
      ned /ALL/;
 441   
 442  *constraining bugindex and maximizing hydropower
 443  loop((tot_vol,case),
 444       FtoUse(f) = 0;
 445       FtoUse("Hydro") =1;
 446  *Set a level for the Bugindex objective
 447  *     FLevel(f)=Levels(f,tot_vol,Scen);
 448  option reslim=20000;
 449  option Threads=6;
 450  option optcr=0.001;
 451  option DNLP= CONOPT;
 452   
 453       TotMonth_volume=Vol_monthlyrelease(tot_vol);
 454       FLevel(f)=Levels(case);
 455   
 456       SOLVE ObjAsConstraint USING dnlp MAXIMIZE CombineObjective;
****                                                                 $257
 457       Scen_store(f,case,tot_vol)= ObjectiveVal.L(f);
 458       ReleaseSave(tot_vol,case,d,p)= release.L(d,p);
 459       EnergyGen_save(tot_vol,case,d,p)= Energy_Gen.L(d,p);
 460       Storage_Save(tot_vol,case,d)=storage.L(d);
 461       ModelResults(tot_vol,case,"SolStat") = ObjAsConstraint.solvestat;
 462       ModelResults(tot_vol,case,"ModStat") = ObjAsConstraint.modelstat;
 463       DISPLAY Scen_store,ReleaseSave,EnergyGen_save,Storage_Save;
 464       option clear=CombineObjective,clear=ObjectiveVal,clear=release;
 465   
 466   
      *  Merge All objectives results in one parameter.
           Obj_Save(f,tot_vol,"sc1")= Scen_store(f,"sc1",tot_vol);
           Obj_Save(f,tot_vol,"sc2")= Scen_store(f,"sc2",tot_vol);
           Obj_Save(f,tot_vol,"sc3")= Scen_store(f,"sc3",tot_vol);
           Obj_Save(f,tot_vol,"sc4")= Scen_store(f,"sc4",tot_vol);
           Obj_Save(f,tot_vol,"sc5")= Scen_store(f,"sc5",tot_vol);
           Obj_Save(f,tot_vol,"sc6")= Scen_store(f,"sc6",tot_vol);
           Obj_Save("BugIndex",tot_vol,"Min")= Extreme_Points("BugIndex",tot_vol
      ,"Min");
           Obj_Save("BugIndex",tot_vol,"Max")=Extreme_Points("BugIndex",tot_vol,
      "Max");
           Obj_Save("Hydro",tot_vol,"Min")= Extreme_Points("Hydro",tot_vol,"Min"
      );
           Obj_Save("Hydro",tot_vol,"Max")= Extreme_Points("Hydro",tot_vol,"Max"
      );
 480  );
 481   
 482   
 483  *-------------------------------------------------------------------------
      -----*
 484  * Dump all input data and results to a GAMS gdx file
 485  Execute_Unload "constraint.gdx";
 486  *Execute_Unload "V1_check.gdx";
 487  * Dump the gdx file to an Excel workbook
 488  Execute "gdx2xls constraint.gdx"
 489   
GAMS 24.2.3  r46072 Released May 22, 2014 WEX-WEI x86_64/MS Windows 06/10/20 16:48:32 Page 2
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Error Messages


141  Symbol neither initialized nor assigned
        A wild shot: You may have spurious commas in the explanatory
        text of a declaration. Check symbol reference list.
257  Solve statement not checked because of previous errors
502  GDXIN  file not open - ignore rest of line
510  Unable to open gdx file for $GDXIN

**** 22 ERROR(S)   0 WARNING(S)
GAMS 24.2.3  r46072 Released May 22, 2014 WEX-WEI x86_64/MS Windows 06/10/20 16:48:32 Page 3
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Include File Summary


   SEQ   GLOBAL TYPE      PARENT   LOCAL  FILENAME

     1        1 INPUT          0       0  C:\Users\moazz\OneDrive\Documents\GitH
                                          ub\-Bug-flow-\Model_Troubleshooting\Ju
                                          ne2018_newobj_troubleshooting\June_new
                                          objanalysis.gms
     2      102 CALL           1     102  GDXXRW.EXE input=June2018.xls output=c
                                          onstraint.gdx set=d rng=day!A1 Rdim=1 
                                          par=Inflow rng=inflow!A1 Rdim=1  par=i
                                          nitstorage rng=initstorage!A1 Rdim=0  
                                          par=maxstorage rng=maxstorage!A1 Rdim=
                                          0   par=minstorage rng=minstorage!A1 R
                                          dim=0  par=maxRel rng=maxR


COMPILATION TIME     =        4.078 SECONDS      3 MB  24.2.3 r46072 WEX-WEI


USER: Utah Water Research Laboratory (5 user)        G140130:1517AV-GEN
      Utah State University                                      DC7087
      License for teaching and research at degree granting institutions


**** FILE SUMMARY

Input      C:\Users\moazz\OneDrive\Documents\GitHub\-Bug-flow-\Model_Troubleshoo
           ting\June2018_newobj_troubleshooting\June_newobjanalysis.gms
Output     C:\Users\moazz\OneDrive\Documents\GitHub\-Bug-flow-\Model_Troubleshoo
           ting\June2018_newobj_troubleshooting\June_newobjanalysis.lst

**** USER ERROR(S) ENCOUNTERED
