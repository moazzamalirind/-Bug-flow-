# Filtering the data frame for only BugIndex Objective
Obj_3Bug<- Objective_3bugflow[Objective_3bugflow[, "f"]=='BugIndex', ]
# Filtering the data frame for only Hydro Objective
Obj_3Hydro<- Objective_3bugflow[Objective_3bugflow[, "f"]=='Hydro', ]
View(Obj_3Bug)
Obj_3Bug<- Objective_3bugflow[Objective_3bugflow[, "f"]=='BugIndex', ]
Obj_3Bug$tot_vol<- NULL
# Filtering the data frame for only Hydro Objective
Obj_3Hydro<- Objective_3bugflow[Objective_3bugflow[, "f"]=='Hydro', ]
Obj_3Hydro$tot_vol<- NULL
View(Obj_3Bug)
View(Obj2)
View(Obj_3Bug)
View(Obj_3Hydro)
Objective_3bugflow$Tot_Vol_AF<- replace(Objective_3bugflow$Tot_Vol_AF,Objective_3bugflow$Tot_Vol_AF=='749449.05','7.49e+05')
# Filtering the data frame for only BugIndex Objective
Obj_3Bug<- Objective_3bugflow[Objective_3bugflow[, "f"]=='BugIndex', ]
Obj_3Bug$tot_vol<- NULL
names(Obj_3Bug) <- c("Freq", "BugIndex")
View(Obj_3Bug)
Obj_3Bug<- Objective_3bugflow[Objective_3bugflow[, "f"]=='BugIndex', ]
Obj_3Bug$tot_vol<- NULL
View(Obj_3Bug)
# Filtering the data frame for only BugIndex Objective
Obj_3Bug<- Objective_3bugflow[Objective_3bugflow[, "f"]=='BugIndex', ]
Obj_3Bug$tot_vol<- NULL
names(Obj_3Bug) <- c("f", "All_cases","BugIndex","tot_vol","Variable","Value","Tot_Vol_AF")
View(Obj_3Bug)
Obj_3Bug<- Objective_3bugflow[Objective_3bugflow[, "f"]=='BugIndex', ]
Obj_3Bug$tot_vol<- NULL
names(Obj_3Bug) <- c("f", "All_cases","Freq","tot_vol","Variable","BugIndex","Tot_Vol_AF")
View(Obj_3Bug)
# Filtering the data frame for only BugIndex Objective
Obj_3Bug<- Objective_3bugflow[Objective_3bugflow[, "f"]=='BugIndex', ]
Obj_3Bug$tot_vol<- NULL
names(Obj_3Bug) <- c("f", "All_cases","Freq","tot_vol","Variable","BugIndex","Tot_Vol_AF")
Obj_3Bug$Freq<- NULL
Obj_3Hydro<- Objective_3bugflow[Objective_3bugflow[, "f"]=='Hydro', ]
Obj_3Hydro$tot_vol<- NULL
View(Obj_3Hydro)
# Filtering the data frame for only Hydro Objective
Obj_3Hydro<- Objective_3bugflow[Objective_3bugflow[, "f"]=='Hydro', ]
Obj_3Hydro$tot_vol<- NULL
Obj_3Hydro$Freq<- NULL
View(Obj_3Hydro)
Obj_3Hydro<- Objective_3bugflow[Objective_3bugflow[, "f"]=='Hydro', ]
Obj_3Hydro$tot_vol<- NULL
Obj_3Hydro$Freq<- NULL
colnames(Obj_3Hydro)[colnames(Obj_3Hydro)=="value"] <- "Hydro"
View(Obj_3Hydro)
#Adding dummy column
Obj_3Hydro$dummy<-Obj_3Hydro$Hydro
View(Obj_3Hydro)
#############################################
#Reading the 3BugFlow day results
#############################################
gdxfile3 <- "Apri1l8_3bugflowdays.gdx"
#  Objective functions with bugflow incorporated in run
Objective_3bugflow <- rgdx(gdxfile3, list(name="obj_save", form = "full"))$val
dfObjective_3bugflow <- as.data.frame.table(Objective_3bugflow)
#dfObjective_3bugflow<-dfObjective_3bugflow[with(dfObjective_3bugflow,order(tot_vol)),]
#  Objective functions with full optimization
Objective_3optimization <- rgdx(gdxfile3, list(name="obj_save2", form = "full"))$val
dfObjective_3optimization <- as.data.frame.table(Objective_3optimization)
#dfObjective_3optimization<-dfObjective_3optimization[with(dfObjective_3optimization,order(tot_vol)),]
# Make Variable for Each Desired Item
dfObjective_3bugflow$Bugflow <- dfObjective_3bugflow$Freq
dfObjective_3optimization$optimization <- dfObjective_3optimization$Freq
#Objectives With senarios
dfobj_3bugflow <- merge(dfObjective_3bugflow, dfObjective_3optimization[,c("f","All_cases","tot_vol","optimization")],by=c("f","All_cases","tot_vol"), all.x=TRUE, sort=TRUE)
#melting both cases (model with all Eqaution and Without Simulation eq) into one column
Objective_3bugflow <- melt(dfobj_3bugflow, id=c("f","tot_vol","All_cases","Freq","tot_vol"))
Objective_3bugflow <-Objective_3bugflow [with(Objective_3bugflow ,order(All_cases)),]
Objective_3bugflow <-Objective_3bugflow [with(Objective_3bugflow ,order(tot_vol)),]
#Creating New Column for linkage with total volume data frame.
Objective_3bugflow$Tot_Vol_AF<-Objective_3bugflow$tot_vol
#Replacing values of current data frame with values of total monthly volume used in Gams model
Objective_3bugflow$Tot_Vol_AF<- ifelse(Objective_3bugflow$tot_vol== "V1",dfmonthvol[1,]$Freq ,
ifelse(Objective_3bugflow$tot_vol== "V2",dfmonthvol[2,]$Freq ,
ifelse(Objective_3bugflow$tot_vol== "V3",dfmonthvol[3,]$Freq ,
ifelse(Objective_3bugflow$tot_vol== "V4",dfmonthvol[4,]$Freq ,
ifelse(Objective_3bugflow$tot_vol== "V5",dfmonthvol[5,]$Freq, "Observed")))))
#converting the observed flow number to the nearest decimal
Objective_3bugflow$Tot_Vol_AF<- replace(Objective_3bugflow$Tot_Vol_AF,Objective_3bugflow$Tot_Vol_AF=='749449.05','7.49e+05')
# Filtering the data frame for only BugIndex Objective
Obj_3Bug<- Objective_3bugflow[Objective_3bugflow[, "f"]=='BugIndex', ]
Obj_3Bug$tot_vol<- NULL
#renaming the columns
names(Obj_3Bug) <- c("f", "All_cases","Freq","tot_vol","Variable","BugIndex","Tot_Vol_AF")
Obj_3Bug$Freq<- NULL
# Filtering the data frame for only Hydro Objective
Obj_3Hydro<- Objective_3bugflow[Objective_3bugflow[, "f"]=='Hydro', ]
#Removing Extra Columns
Obj_3Hydro$tot_vol<- NULL
Obj_3Hydro$Freq<- NULL
#renaming the column
colnames(Obj_3Hydro)[colnames(Obj_3Hydro)=="value"] <- "Hydro"
#Adding  column for bug values
Obj_3Hydro$BugIndex<-Obj_3Bug$BugIndex
View(Obj_3Hydro)
ggplot(Obj2, aes(Hydro_Obj,value,color=Tot_Vol_AF, shape=variable,linetype = variable))+
geom_point(stat = "identity", size=6)+
geom_line(size=1.5)+
xlab("Hydro-Power Revenue Generated($)") + ylab("Hydro Peaking Index")+
theme(axis.text.x = element_text( color="black", size=20, angle=45, hjust =0.8, vjust =1),
axis.text.y = element_text( color="black", size=20),
axis.title.x = element_text(color="blue", size=24, face="bold", vjust = -0.3),
axis.title.y = element_text(color="blue", size=24, face="bold", vjust = 2))+
scale_x_continuous(breaks = seq(10000000,24000000,1000000))+
scale_y_continuous(breaks = seq(0,0.7,0.1))+
theme(legend.title=element_text(size=22,face="bold"))+
theme(legend.text=element_text(size=22,face="bold"))+
ggtitle("Pareto-Optimal Curve (April-2018)")+
theme(plot.title = element_text(size=30,hjust =0.5, vjust = 2,face="bold"),legend.justification=c(1,0),legend.position=c(0.998, 0.01))+
ggplot(Obj_3Hydro, aes(Hydro,BugIndex,color=Tot_Vol_AF, shape=variable,linetype = variable))+
geom_point(stat = "identity", size=6)+
geom_line(size=1.5)+
dev.copy(png,"3bugflowday.png", width =5000, height =2500,res=200)
dev.off()
#####################################################
ggplot(Obj2, aes(Hydro_Obj,value,color=Tot_Vol_AF, shape=variable,linetype = variable))+
geom_point(stat = "identity", size=6)+
geom_line(size=1.5)+
xlab("Hydro-Power Revenue Generated($)") + ylab("Hydro Peaking Index")+
theme(axis.text.x = element_text( color="black", size=20, angle=45, hjust =0.8, vjust =1),
axis.text.y = element_text( color="black", size=20),
axis.title.x = element_text(color="blue", size=24, face="bold", vjust = -0.3),
axis.title.y = element_text(color="blue", size=24, face="bold", vjust = 2))+
scale_x_continuous(breaks = seq(10000000,24000000,1000000))+
scale_y_continuous(breaks = seq(0,0.7,0.1))+
theme(legend.title=element_text(size=22,face="bold"))+
theme(legend.text=element_text(size=22,face="bold"))+
ggtitle("Pareto-Optimal Curve (April-2018)")+
theme(plot.title = element_text(size=30,hjust =0.5, vjust = 2,face="bold"),legend.justification=c(1,0),legend.position=c(0.998, 0.01))+
ggplot(Obj_3Hydro, aes(Hydro,BugIndex,color=Tot_Vol_AF, shape=variable,linetype = variable))+
geom_point(stat = "identity", size=6)+
geom_line(size=1.5)
dev.copy(png,"3bugflowday.png", width =5000, height =2500,res=200)
dev.off()
#####################################################
ggplot(Obj2, aes(Hydro_Obj,value,color=Tot_Vol_AF, shape=variable,linetype = variable))+
geom_point(stat = "identity", size=6)+
geom_line(size=1.5)+
ggplot(Obj_3Hydro, aes(Hydro,BugIndex,color=Tot_Vol_AF, shape=variable,linetype = variable))+
geom_point(stat = "identity", size=6)+
geom_line(size=1.5)+
xlab("Hydro-Power Revenue Generated($)") + ylab("Hydro Peaking Index")+
theme(axis.text.x = element_text( color="black", size=20, angle=45, hjust =0.8, vjust =1),
axis.text.y = element_text( color="black", size=20),
axis.title.x = element_text(color="blue", size=24, face="bold", vjust = -0.3),
axis.title.y = element_text(color="blue", size=24, face="bold", vjust = 2))+
scale_x_continuous(breaks = seq(10000000,24000000,1000000))+
scale_y_continuous(breaks = seq(0,0.7,0.1))+
theme(legend.title=element_text(size=22,face="bold"))+
theme(legend.text=element_text(size=22,face="bold"))+
ggtitle("Pareto-Optimal Curve (April-2018)")+
theme(plot.title = element_text(size=30,hjust =0.5, vjust = 2,face="bold"),legend.justification=c(1,0),legend.position=c(0.998, 0.01))
dev.copy(png,"3bugflowday.png", width =5000, height =2500,res=200)
dev.off()
ggplot(Obj_3Hydro, aes(Hydro,BugIndex,color=Tot_Vol_AF, shape=variable,linetype = variable))+
geom_point(stat = "identity", size=6)+
geom_line(size=1.5)+
xlab("Hydro-Power Revenue Generated($)") + ylab("Hydro Peaking Index")+
theme(axis.text.x = element_text( color="black", size=20, angle=45, hjust =0.8, vjust =1),
axis.text.y = element_text( color="black", size=20),
axis.title.x = element_text(color="blue", size=24, face="bold", vjust = -0.3),
axis.title.y = element_text(color="blue", size=24, face="bold", vjust = 2))+
scale_x_continuous(breaks = seq(10000000,24000000,1000000))+
scale_y_continuous(breaks = seq(0,0.7,0.1))+
theme(legend.title=element_text(size=22,face="bold"))+
theme(legend.text=element_text(size=22,face="bold"))+
ggtitle("Pareto-Optimal Curve (April-2018)")+
theme(plot.title = element_text(size=30,hjust =0.5, vjust = 2,face="bold"),legend.justification=c(1,0),legend.position=c(0.998, 0.01))
dev.copy(png,"3bugflowday.png", width =5000, height =2500,res=200)
dev.off()
ggplot()+
geom_point(stat = "identity", size=6)+
geom_line(Obj2, aes(Hydro_Obj,value,color=Tot_Vol_AF, shape=variable,linetype = variable),size=1.5)+
geom_line(Obj_3Hydro, aes(Hydro,BugIndex,color=Tot_Vol_AF, shape=variable,linetype = variable),size=1.5)+
xlab("Hydro-Power Revenue Generated($)") + ylab("Hydro Peaking Index")+
theme(axis.text.x = element_text( color="black", size=20, angle=45, hjust =0.8, vjust =1),
axis.text.y = element_text( color="black", size=20),
axis.title.x = element_text(color="blue", size=24, face="bold", vjust = -0.3),
axis.title.y = element_text(color="blue", size=24, face="bold", vjust = 2))+
scale_x_continuous(breaks = seq(10000000,24000000,1000000))+
scale_y_continuous(breaks = seq(0,0.7,0.1))+
theme(legend.title=element_text(size=22,face="bold"))+
theme(legend.text=element_text(size=22,face="bold"))+
ggtitle("Pareto-Optimal Curve (April-2018)")+
theme(plot.title = element_text(size=30,hjust =0.5, vjust = 2,face="bold"),legend.justification=c(1,0),legend.position=c(0.998, 0.01))
dev.copy(png,"3bugflowday.png", width =5000, height =2500,res=200)
dev.off()
#####################################################
# Plotting Objective Values (Pareto-optimal Curve)
#####################################################
ggplot()+
#geom_point(stat = "identity", size=6)+
geom_line(Obj2, aes(Hydro_Obj,value,color=Tot_Vol_AF, shape=variable,linetype = variable),size=1.5)+
geom_line(Obj_3Hydro, aes(Hydro,BugIndex,color=Tot_Vol_AF, shape=variable,linetype = variable),size=1.5)+
xlab("Hydro-Power Revenue Generated($)") + ylab("Hydro Peaking Index")+
theme(axis.text.x = element_text( color="black", size=20, angle=45, hjust =0.8, vjust =1),
axis.text.y = element_text( color="black", size=20),
axis.title.x = element_text(color="blue", size=24, face="bold", vjust = -0.3),
axis.title.y = element_text(color="blue", size=24, face="bold", vjust = 2))+
scale_x_continuous(breaks = seq(10000000,24000000,1000000))+
scale_y_continuous(breaks = seq(0,0.7,0.1))+
theme(legend.title=element_text(size=22,face="bold"))+
theme(legend.text=element_text(size=22,face="bold"))+
ggtitle("Pareto-Optimal Curve (April-2018)")+
theme(plot.title = element_text(size=30,hjust =0.5, vjust = 2,face="bold"),legend.justification=c(1,0),legend.position=c(0.998, 0.01))
#####################################################
# Plotting Objective Values (Pareto-optimal Curve)
#####################################################
ggplot()+
#geom_point(stat = "identity", size=6)+
#geom_line(Obj2, aes(Hydro_Obj,value,color=Tot_Vol_AF, shape=variable,linetype = variable),size=1.5)+
geom_line(Obj_3Hydro, aes(Hydro,BugIndex,color=Tot_Vol_AF, shape=variable,linetype = variable),size=1.5)+
xlab("Hydro-Power Revenue Generated($)") + ylab("Hydro Peaking Index")+
theme(axis.text.x = element_text( color="black", size=20, angle=45, hjust =0.8, vjust =1),
axis.text.y = element_text( color="black", size=20),
axis.title.x = element_text(color="blue", size=24, face="bold", vjust = -0.3),
axis.title.y = element_text(color="blue", size=24, face="bold", vjust = 2))+
scale_x_continuous(breaks = seq(10000000,24000000,1000000))+
scale_y_continuous(breaks = seq(0,0.7,0.1))+
theme(legend.title=element_text(size=22,face="bold"))+
theme(legend.text=element_text(size=22,face="bold"))+
ggtitle("Pareto-Optimal Curve (April-2018)")+
theme(plot.title = element_text(size=30,hjust =0.5, vjust = 2,face="bold"),legend.justification=c(1,0),legend.position=c(0.998, 0.01))
#####################################################
# Plotting Objective Values (Pareto-optimal Curve)
#####################################################
ggplot()+
#geom_point(stat = "identity", size=6)+
#geom_line(Obj2, aes(Hydro_Obj,value,color=Tot_Vol_AF, shape=variable,linetype = variable),size=1.5)+
geom_line(Obj_3Hydro, aes(Hydro,BugIndex,color=Tot_Vol_AF, shape=variable,linetype = variable),size=1.5)+
xlab("Hydro-Power Revenue Generated($)") + ylab("Hydro Peaking Index")+
theme(axis.text.x = element_text( color="black", size=20, angle=45, hjust =0.8, vjust =1),
axis.text.y = element_text( color="black", size=20),
axis.title.x = element_text(color="blue", size=24, face="bold", vjust = -0.3),
axis.title.y = element_text(color="blue", size=24, face="bold", vjust = 2))+
scale_x_continuous(breaks = seq(10000000,24000000,1000000))+
scale_y_continuous(breaks = seq(0,0.7,0.1))+
theme(legend.title=element_text(size=22,face="bold"))+
theme(legend.text=element_text(size=22,face="bold"))+
ggtitle("Pareto-Optimal Curve (April-2018)")+
theme(plot.title = element_text(size=30,hjust =0.5, vjust = 2,face="bold"),legend.justification=c(1,0),legend.position=c(0.998, 0.01))
#####################################################
# Plotting Objective Values (Pareto-optimal Curve)
#####################################################
ggplot()+
geom_point(stat = "identity", size=6)+
geom_line(Obj2, mapping= aes(Hydro_Obj,value,color=Tot_Vol_AF, shape=variable,linetype = variable),size=1.5)+
geom_line(Obj_3Hydro, mapping=aes(Hydro,BugIndex,color=Tot_Vol_AF, shape=variable,linetype = variable),size=1.5)+
xlab("Hydro-Power Revenue Generated($)") + ylab("Hydro Peaking Index")+
theme(axis.text.x = element_text( color="black", size=20, angle=45, hjust =0.8, vjust =1),
axis.text.y = element_text( color="black", size=20),
axis.title.x = element_text(color="blue", size=24, face="bold", vjust = -0.3),
axis.title.y = element_text(color="blue", size=24, face="bold", vjust = 2))+
scale_x_continuous(breaks = seq(10000000,24000000,1000000))+
scale_y_continuous(breaks = seq(0,0.7,0.1))+
theme(legend.title=element_text(size=22,face="bold"))+
theme(legend.text=element_text(size=22,face="bold"))+
ggtitle("Pareto-Optimal Curve (April-2018)")+
theme(plot.title = element_text(size=30,hjust =0.5, vjust = 2,face="bold"),legend.justification=c(1,0),legend.position=c(0.998, 0.01))
#####################################################
# Plotting Objective Values (Pareto-optimal Curve)
#####################################################
ggplot()+
geom_point(stat = "identity", size=6)+
geom_line(Obj2, mapping= aes(Hydro_Obj,value,color=Tot_Vol_AF, linetype = variable),size=1.5)+
geom_line(Obj_3Hydro, mapping=aes(Hydro,BugIndex,color=Tot_Vol_AF, linetype = variable),size=1.5)+
xlab("Hydro-Power Revenue Generated($)") + ylab("Hydro Peaking Index")+
theme(axis.text.x = element_text( color="black", size=20, angle=45, hjust =0.8, vjust =1),
axis.text.y = element_text( color="black", size=20),
axis.title.x = element_text(color="blue", size=24, face="bold", vjust = -0.3),
axis.title.y = element_text(color="blue", size=24, face="bold", vjust = 2))+
scale_x_continuous(breaks = seq(10000000,24000000,1000000))+
scale_y_continuous(breaks = seq(0,0.7,0.1))+
theme(legend.title=element_text(size=22,face="bold"))+
theme(legend.text=element_text(size=22,face="bold"))+
ggtitle("Pareto-Optimal Curve (April-2018)")+
theme(plot.title = element_text(size=30,hjust =0.5, vjust = 2,face="bold"),legend.justification=c(1,0),legend.position=c(0.998, 0.01))
dev.copy(png,"3bugflowday.png", width =5000, height =2500,res=200)
dev.off()
###############################################
## Read in Deterministic Model Results
###############################################
gdxfile <- "Apri1l8_2periods_0to8.gdx"
gdxfile
# Output summary of gdx file contents to console
#gdxInfo(gdxName = gdxfile, dump=FALSE, returnList=TRUE, returnDF=TRUE)
#  Objective functions values under all senarios with all equations intact.
Objval_alleqs <- rgdx(gdxfile, list(name="Obj_Save", form = "full"))$val
#  Objective functions values under all senarios with all equations intact.
Objval_nosim <- rgdx(gdxfile, list(name="Obj_Save2", form = "full"))$val
# Volume senario values
monthlyVol_values <- rgdx(gdxfile, list(name="Vol_monthlyrelease", form = "full"))$val
#Release values under extreme points with respect to different senarios and all equations intact
Extpoint_rel_alleqs <- rgdx(gdxfile, list(name="RStore", form = "full"))$val
#Release values under extreme points with respect to different senarios and without simulation equation intact
Extpoint_rel_nosim <- rgdx(gdxfile, list(name="RStore2", form = "full"))$val
#Release values with all equations intact under all the different senarios
Release_alleqs <- rgdx(gdxfile, list(name="ReleaseSave", form = "full"))$val
#Release values without simulation equation intact under all the different senarios
Release_nosim <- rgdx(gdxfile, list(name="ReleaseSave2", form = "full"))$val
#Energy Generated values under extreme points with respect to different senarios and all equations intact
Extpoint_EnergyGen_alleqs<- rgdx(gdxfile, list(name="XStore", form = "full"))$val
#Energy Generated values under extreme points with respect to different senarios and without simulation equations intact
Extpoint_EnergyGen_nosim<- rgdx(gdxfile, list(name="XStore2", form = "full"))$val
#Energy Generated values with all equations intact under all the different senarios
EnergyGen_alleqs <- rgdx(gdxfile, list(name="EnergyGen_save", form = "full"))$val
#Energy Generated values without simulation equation intact under all the different senarios
EnergyGen_nosim <- rgdx(gdxfile, list(name= "EnergyGen_save2", form = "full"))$val
#Storage values under extreme points with respect to different senarios and all equations intact
Extpoint_storage_alleqs<- rgdx(gdxfile, list(name="Sstore", form = "full"))$val
#Storage values under extreme points with respect to different senarios and without simulation equation intact
Extpoint_storage_nosim<- rgdx(gdxfile, list(name="Sstore2", form = "full"))$val
#Storage values with all equations intact under all the different senarios
Storage_alleqs<- rgdx(gdxfile, list(name="Storage_Save", form = "full"))$val
#Storage values without simulation equation intact under all the different senarios
Storage_nosim<- rgdx(gdxfile, list(name="Storage_Save2", form = "full"))$val
#Convert to dataframes
dfmonthvol<- as.data.frame.table(monthlyVol_values)
dfobj_alleqs <- as.data.frame.table(Objval_alleqs)
dfobj_nosim <- as.data.frame.table(Objval_nosim)
dfExtRel_alleqs<- as.data.frame.table(Extpoint_rel_alleqs)
dfExtRel_nosim<- as.data.frame.table(Extpoint_rel_nosim)
dfRel_alleqs<- as.data.frame.table(Release_alleqs)
dfRel_nosim<- as.data.frame.table(Release_nosim)
dfExtEnergy_Bugflow<- as.data.frame.table(Extpoint_EnergyGen_alleqs)
dfExtEnergy_optimization<- as.data.frame.table(Extpoint_EnergyGen_nosim)
dfEnergy_Bugflow<- as.data.frame.table(EnergyGen_alleqs)
dfEnergy_optimization<- as.data.frame.table(EnergyGen_nosim)
dfExtstor_alleqs<- as.data.frame.table(Extpoint_storage_alleqs)
dfExtstor_nosim<- as.data.frame.table(Extpoint_storage_nosim)
dfstor_alleqs<- as.data.frame.table(Storage_alleqs)
dfstor_nosim<- as.data.frame.table(Storage_nosim)
# Make Variable for Each Desired Item
dfobj_alleqs$Bugflow <- dfobj_alleqs$Freq
dfobj_nosim$optimization <- dfobj_nosim$Freq
dfExtRel_alleqs$ExtRel_Bugflow<-dfExtRel_alleqs$Freq
dfRel_alleqs$Rel_Bugflow <- dfRel_alleqs$Freq
dfExtRel_nosim$ExtRel_optimization <- dfExtRel_nosim$Freq
dfRel_nosim$Rel_optimization <- dfRel_nosim$Freq
dfExtEnergy_Bugflow$ExtEnergy_Bugflow <- dfExtEnergy_Bugflow$Freq
dfEnergy_Bugflow$Energy_Bugflow <- dfEnergy_Bugflow$Freq
dfExtEnergy_optimization$ExtEnergy_optimization <-dfExtEnergy_optimization$Freq
dfEnergy_optimization$Energy_optimization <- dfEnergy_optimization$Freq
dfExtstor_alleqs$Extstor_Bugflow <- dfExtstor_alleqs$Freq
dfstor_alleqs$stor_Bugflow <- dfstor_alleqs$Freq
dfExtstor_nosim$Extstor_optimization <- dfExtstor_nosim$Freq
dfstor_nosim$stor_optimization <- dfstor_nosim$Freq
#Merge the related dataframes into one
#Objectives With senarios
dfResults_obj <- merge(dfobj_alleqs, dfobj_nosim[,c("f","All_cases","tot_vol","optimization")],by=c("f","All_cases","tot_vol"), all.x=TRUE, sort=TRUE)
#Release Extreme points
dfResults_ExtRel <- merge(dfExtRel_alleqs,dfExtRel_nosim[,c("f2","d","tot_vol","p","ExtRel_optimization")],by=c("f2","d","tot_vol","p"), all.x=TRUE, sort=TRUE)
#Release With senarios
dfResults_ScenRel <- merge(dfRel_alleqs,dfRel_nosim[,c("tot_vol","Scen","d","p","Rel_optimization")],by=c("tot_vol","Scen","d","p"), all.x=TRUE, sort=TRUE)
#Energy Extreme points
dfResults_ExtEnergy <- merge(dfExtEnergy_Bugflow,dfExtEnergy_optimization[,c("f2","d","tot_vol","p","ExtEnergy_optimization")],by=c("f2","d","tot_vol","p"), all.x=TRUE, sort=TRUE)
#Energy With senarios
dfResults_ScenEnergy <- merge(dfEnergy_Bugflow,dfEnergy_optimization[,c("tot_vol","Scen","d","p","Energy_optimization")],by=c("tot_vol","Scen","d","p"), all.x=TRUE, sort=TRUE)
#Storage Extreme points
dfResults_Extstorage <- merge(dfExtstor_alleqs,dfExtstor_nosim[,c("f2","d","tot_vol","Extstor_optimization")],by=c("f2","d","tot_vol"), all.x=TRUE, sort=TRUE)
#storage With senarios
dfResults_Scenstorage <- merge(dfstor_alleqs,dfstor_nosim[,c("tot_vol","Scen","d","stor_optimization")],by=c("tot_vol","Scen","d"), all.x=TRUE, sort=TRUE)
#############################################
#Rearranging and Plotting Section......
#############################################
library(ggplot2)
library(reshape2)
library(dplyr)
#############################################
#melting both cases (model with all Eqaution and Without Simulation eq) into one column
Objective_Melt <- melt(dfResults_obj, id=c("f","tot_vol","All_cases","Freq"))
#filtering the data frame with respect to Objective
# Filtering the data frame for only BugIndex Objective
Obj_Bug<- Objective_Melt[Objective_Melt[, "f"]=='BugIndex', ]
Obj_Bug<- Obj_Bug[with(Obj_Bug,order(tot_vol)),]
# Filtering the data frame for only Hydro Objective
Obj_Hydro<- Objective_Melt[Objective_Melt[, "f"]=='Hydro', ]
Obj_Hydro$Hydro_Obj<- Obj_Hydro$value
Obj_Hydro<- Obj_Hydro[with(Obj_Hydro,order(tot_vol)),]
#Merging both filtered data frame in one
Obj_Bug$Hydro_Obj<-Obj_Hydro$Hydro_Obj
#Removing Freq Column bcz its extra and confusing here.
Obj_Bug$Freq<- NULL
#melting both cases (model with all Eqaution and Without Simulation eq) into one column
Obj_Melt <- melt(Obj_Bug, id=c("tot_vol","All_cases","f","Hydro_Obj","variable","value"))
Obj_Melt<- Obj_Melt[with(Obj_Melt,order(tot_vol)),]
#Making copy of Obj-Melt data frame inorder to further filtering.
Obj2 <- Obj_Melt
#Removing the columns from the data frame which are not needed for plot.
#Obj2$All_cases<- NULL
Obj2$f <- NULL
#############################################
#Reading the validation results
#############################################
gdxfile2 <- "Validation_April2018_0to8.gdx"
gdxfile2
#  Objective functions from validation run
val_Objective <- rgdx(gdxfile2, list(name="FStore", form = "full"))$val
dfobj_validation <- as.data.frame.table(val_Objective)
Obj_val<- dfobj_validation[dfobj_validation[, "f2"]=='Hydro', ]
final_df <- as.data.frame(t(Obj_val))
names(final_df)[1]<-"BugIndex"
names(final_df)[2]<-"Hydro"
Obj<-final_df[-c(1,2), ]
########################################################
#Creating a new data frame for validation results inorder to merge them with the previous data frame.
O2<- data.frame(tot_vol="Observed",Hydro_Obj= as.numeric(as.character(Obj$Hydro)), variable="Observed",All_cases="validation",value=as.numeric(as.character(Obj$BugIndex)))
#Binding Data frames
Obj2 <- rbind(Obj2, O2)
#Creating New Column for linkage with total volume data frame.
Obj2$Tot_Vol_AF<-Obj2$tot_vol
#Replacing values of current data frame with values of total monthly volume used in Gams model
Obj2$Tot_Vol_AF<- ifelse(Obj2$tot_vol== "V1",dfmonthvol[1,]$Freq ,
ifelse(Obj2$tot_vol== "V2",dfmonthvol[2,]$Freq ,
ifelse(Obj2$tot_vol== "V3",dfmonthvol[3,]$Freq ,
ifelse(Obj2$tot_vol== "V4",dfmonthvol[4,]$Freq ,
ifelse(Obj2$tot_vol== "V5",dfmonthvol[5,]$Freq , "Observed")))))
#converting the observed flow number to the nearest decimal
Obj2$Tot_Vol_AF<- replace(Obj2$Tot_Vol_AF,Obj2$Tot_Vol_AF=='749449.05','7.49e+05')
#odering the data set.
Obj2<-Obj2[with(Obj2,order(value)),]
Obj2<-Obj2[with(Obj2,order(tot_vol)),]
#####################################################
# Plotting Objective Values (Pareto-optimal Curve)
#####################################################
ggplot(Obj2, aes(Hydro_Obj,value,color=Tot_Vol_AF, shape=variable,linetype = variable))+
geom_point(stat = "identity", size=6)+
geom_line(size=1.5)+
xlab("Hydro-Power Revenue Generated($)") + ylab("Hydro Peaking Index")+
theme(axis.text.x = element_text( color="black", size=20, angle=45, hjust =0.8, vjust =1),
axis.text.y = element_text( color="black", size=20),
axis.title.x = element_text(color="blue", size=24, face="bold", vjust = -0.3),
axis.title.y = element_text(color="blue", size=24, face="bold", vjust = 2))+
scale_x_continuous(breaks = seq(10000000,24000000,1000000))+
scale_y_continuous(breaks = seq(0,0.7,0.1))+
theme(legend.title=element_text(size=22,face="bold"))+
theme(legend.text=element_text(size=22,face="bold"))+
ggtitle("Pareto-Optimal Curve (April-2018)")+
theme(plot.title = element_text(size=30,hjust =0.5, vjust = 2,face="bold"),legend.justification=c(1,0),legend.position=c(0.998, 0.01))
dev.copy(png,"Pareto-optimal.png", width =5000, height =2500,res=200)
dev.off()
#############################################
#Reading the 3BugFlow day results
#############################################
gdxfile3 <- "Apri1l8_3bugflowdays.gdx"
#  Objective functions with bugflow incorporated in run
Objective_3bugflow <- rgdx(gdxfile3, list(name="obj_save", form = "full"))$val
dfObjective_3bugflow <- as.data.frame.table(Objective_3bugflow)
#dfObjective_3bugflow<-dfObjective_3bugflow[with(dfObjective_3bugflow,order(tot_vol)),]
#  Objective functions with full optimization
Objective_3optimization <- rgdx(gdxfile3, list(name="obj_save2", form = "full"))$val
dfObjective_3optimization <- as.data.frame.table(Objective_3optimization)
#dfObjective_3optimization<-dfObjective_3optimization[with(dfObjective_3optimization,order(tot_vol)),]
# Make Variable for Each Desired Item
dfObjective_3bugflow$Bugflow <- dfObjective_3bugflow$Freq
dfObjective_3optimization$optimization <- dfObjective_3optimization$Freq
#Objectives With senarios
dfobj_3bugflow <- merge(dfObjective_3bugflow, dfObjective_3optimization[,c("f","All_cases","tot_vol","optimization")],by=c("f","All_cases","tot_vol"), all.x=TRUE, sort=TRUE)
#melting both cases (model with all Eqaution and Without Simulation eq) into one column
Objective_3bugflow <- melt(dfobj_3bugflow, id=c("f","tot_vol","All_cases","Freq","tot_vol"))
Objective_3bugflow <-Objective_3bugflow [with(Objective_3bugflow ,order(All_cases)),]
Objective_3bugflow <-Objective_3bugflow [with(Objective_3bugflow ,order(tot_vol)),]
#Creating New Column for linkage with total volume data frame.
Objective_3bugflow$Tot_Vol_AF<-Objective_3bugflow$tot_vol
#Replacing values of current data frame with values of total monthly volume used in Gams model
Objective_3bugflow$Tot_Vol_AF<- ifelse(Objective_3bugflow$tot_vol== "V1",dfmonthvol[1,]$Freq ,
ifelse(Objective_3bugflow$tot_vol== "V2",dfmonthvol[2,]$Freq ,
ifelse(Objective_3bugflow$tot_vol== "V3",dfmonthvol[3,]$Freq ,
ifelse(Objective_3bugflow$tot_vol== "V4",dfmonthvol[4,]$Freq ,
ifelse(Objective_3bugflow$tot_vol== "V5",dfmonthvol[5,]$Freq, "Observed")))))
#converting the observed flow number to the nearest decimal
Objective_3bugflow$Tot_Vol_AF<- replace(Objective_3bugflow$Tot_Vol_AF,Objective_3bugflow$Tot_Vol_AF=='749449.05','7.49e+05')
# Filtering the data frame for only BugIndex Objective
Obj_3Bug<- Objective_3bugflow[Objective_3bugflow[, "f"]=='BugIndex', ]
Obj_3Bug$tot_vol<- NULL
#renaming the columns
names(Obj_3Bug) <- c("f", "All_cases","Freq","tot_vol","Variable","BugIndex","Tot_Vol_AF")
Obj_3Bug$Freq<- NULL
# Filtering the data frame for only Hydro Objective
Obj_3Hydro<- Objective_3bugflow[Objective_3bugflow[, "f"]=='Hydro', ]
#Removing Extra Columns
Obj_3Hydro$tot_vol<- NULL
Obj_3Hydro$Freq<- NULL
#renaming the column
colnames(Obj_3Hydro)[colnames(Obj_3Hydro)=="value"] <- "Hydro"
#Adding  column for bug values
Obj_3Hydro$BugIndex<-Obj_3Bug$BugIndex
#####################################################
# Plotting Objective Values (Pareto-optimal Curve)
#####################################################
ggplot()+
geom_point(stat = "identity", size=6)+
geom_line(Obj2, mapping= aes(Hydro_Obj,value,color=Tot_Vol_AF, linetype = variable),size=1.5)+
geom_line(Obj_3Hydro, mapping=aes(Hydro,BugIndex,color=Tot_Vol_AF, linetype = variable),size=1.5)+
xlab("Hydro-Power Revenue Generated($)") + ylab("Hydro Peaking Index")+
theme(axis.text.x = element_text( color="black", size=20, angle=45, hjust =0.8, vjust =1),
axis.text.y = element_text( color="black", size=20),
axis.title.x = element_text(color="blue", size=24, face="bold", vjust = -0.3),
axis.title.y = element_text(color="blue", size=24, face="bold", vjust = 2))+
scale_x_continuous(breaks = seq(10000000,24000000,1000000))+
scale_y_continuous(breaks = seq(0,0.7,0.1))+
theme(legend.title=element_text(size=22,face="bold"))+
theme(legend.text=element_text(size=22,face="bold"))+
ggtitle("Pareto-Optimal Curve (April-2018)")+
theme(plot.title = element_text(size=30,hjust =0.5, vjust = 2,face="bold"),legend.justification=c(1,0),legend.position=c(0.998, 0.01))
dev.copy(png,"3bugflowday.png", width =5000, height =2500,res=200)
dev.off()
